#!/bin/bash

T_BOLD="\e[1m"
T_NORMAL="\e[0m"

C_PROMPT_BRANCH="170;120;120"
FMT_BRANCH="\[\e[38;2;${C_PROMPT_BRANCH}m\]"

C_USR="50;255;50"
C_PWD="80;125;255"

C_DEL="\[\e[38;2;255;0;0m\]"
C_MOD="\[\e[38;2;255;255;0m\]"
C_NEW="\[\e[38;2;0;255;0m\]"
C_UNT="\[\e[38;2;100;100;100m\]"

FMT_PWD="\[\e[38;2;${C_PWD}m\e[1m\]"

if [ -z "$GITPS1_USR" ] ; then
	GITPS1_USR="\u"
fi

if [ -z "$GITPS1_HOST" ] ; then
	GITPS1_HOST="\h"
fi

P_USR="\[${T_BOLD}\e[38;2;${C_USR}m\]${GITPS1_USR}@${GITPS1_HOST}\[${T_NORMAL}\]"

parse_output() {
	ST_NEW_COUNT=0
	ST_MOD_COUNT=0
	ST_DEL_COUNT=0
	UT_NEW_COUNT=0
	UT_MOD_COUNT=0
	UT_DEL_COUNT=0
	UT_UNT_COUNT=0

	while [ $# -gt 0 ] ; do
		COUNT="$1"
		shift 1

		case "$1" in
			BRANCH=*) BRANCH_NAME="${1#BRANCH=}" ;;
			OFFSET=*) BRANCH_OFFSET="${1#OFFSET=}" ;;
			D?)	ST_DEL_COUNT="$((ST_DEL_COUNT + COUNT))" ;;
			M?)	ST_MOD_COUNT="$((ST_MOD_COUNT + COUNT))" ;;
			A?)	ST_NEW_COUNT="$((ST_NEW_COUNT + COUNT))" ;;
			?D)	UT_DEL_COUNT="$((UT_DEL_COUNT + COUNT))" ;;
			?M)	UT_MOD_COUNT="$((UT_MOD_COUNT + COUNT))" ;;
			?A)	UT_NEW_COUNT="$((UT_NEW_COUNT + COUNT))" ;;
			\?\?) UT_UNT_COUNT="$COUNT" ;;
		esac

		shift 1
	done

	ST_DEL="${C_DEL}${ST_DEL_COUNT}"
	ST_MOD="${C_MOD}${ST_MOD_COUNT}"
	ST_NEW="${C_NEW}${ST_NEW_COUNT}"
	UT_DEL="${C_DEL}${UT_DEL_COUNT}"
	UT_MOD="${C_MOD}${UT_MOD_COUNT}"
	UT_NEW="${C_NEW}${UT_NEW_COUNT}"
	UT_UNT="${C_UNT}${UT_UNT_COUNT}"
}

prompt_make() {
	P_BRANCH=""
	P_PWD='\w'

	GIT_STATUS_OUTPUT="$(git status --porcelain --ahead-behind -b 2> /dev/null)"

	if [ $? -eq 0 ] ; then
		GIT_ROOT_DIR=$(git rev-parse --show-toplevel 2> /dev/null)
		GIT_ROOT_BASENAME=$(basename "$GIT_ROOT_DIR")
		P_PWD="git://${GIT_ROOT_BASENAME}${PWD#${GIT_ROOT_DIR}}"

		set -f

		parse_output $(printf "%s" "$GIT_STATUS_OUTPUT"	\
				| sed -n	\
					-e 's/^## \([a-zA-Z_0-9-]*\)\.\.\..* \[ahead \([0-9]\+\)\]$/BRANCH=\1\nOFFSET=+\2/p'	\
					-e 's/^## \([a-zA-Z_0-9-]*\)\.\.\..* \[behind \([0-9]\+\)\]$/BRANCH=\1\nOFFSET=-\2/p'	\
					-e 's/^## \([a-zA-Z_0-9-]*\)\.\.\..*$/BRANCH=\1\nOFFSET=0/p'	\
					-e 's/^ \([A-Z?]\) .*$/_\1/p'	\
					-e 's/^\([A-Z?]\) .*$/\1_/p'	\
					-e 's/^\([A-Z?][A-Z?]\) .*$/\1/p'	\
				| sort	\
				| uniq -c)

		set +f

		if [ "$BRANCH_OFFSET" -gt 0 ] ; then
			FMT_BRANCH_OFFSET="\[${T_BOLD}\e[38;2;0;255;0m\]"
		elif [ "$BRANCH_OFFSET" -lt 0 ] ; then
			FMT_BRANCH_OFFSET="\[${T_BOLD}\e[38;2;255;0;0m\]"
		else
			FMT_BRANCH_OFFSET="\[${C_UNT}${T_BOLD}\]"
		fi

		P_BRANCH_OFFSET="${FMT_BRANCH_OFFSET}${BRANCH_OFFSET}${T_NORMAL}"

		P_STAGED="${ST_NEW} ${ST_MOD} ${ST_DEL}${T_NORMAL}"
		P_UNSTAGED="${UT_NEW} ${UT_MOD} ${UT_DEL}${T_NORMAL}"
		P_CHANGES="${P_STAGED} | ${P_UNSTAGED} | ${UT_UNT}"
		P_BRANCH="$FMT_BRANCH[ ${BRANCH_NAME} ${P_BRANCH_OFFSET}${FMT_BRANCH} : ${P_CHANGES}${FMT_BRANCH} ]${T_NORMAL}\n"
	fi

	TIMESTAMP="${C_MOD}[\D{%F %T}]${T_NORMAL}"

	PS1="${TIMESTAMP}\n${P_BRANCH}${P_USR}:${FMT_PWD}${P_PWD}\[${T_NORMAL}\]$ "
}

PROMPT_COMMAND="prompt_make"
